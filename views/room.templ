package views

script handler() {
    const hoso = document.querySelector("#hoso");
    const playBtn = document.querySelector("#playBtn");
    const videoStatus = document.querySelector("#videoStatus");
    const videoPlaythrough = document.querySelector("#videoPlaythrough");
    const playthroughBtn = document.querySelector("#playthroughBtn");
    const play = "play";
    const pause = "pause";
    const chatEvt = "chat_event";
    const toggleEvt = "toggle_event";
    window.triggeredByEvt = false;

    function toggleVideo(action) {
        console.log(`toggle video: ${action}`)
        if (action === play) {
            // play video
            hoso.play();
            playBtn.innerHTML = pause;
            action = pause;
        } else {
            hoso.pause();
            playBtn.innerHTML = play;
            action = play;
        }
        videoStatus.value = action;
    }

    function updateConnStatusText(status) {
        document.querySelector("#status").innerHTML = status;
    }

    document.body.addEventListener("htmx:wsConnecting", () => updateConnStatusText("Connecting..."));
    document.body.addEventListener("htmx:wsOpen", () => updateConnStatusText("Connected."));
    document.body.addEventListener("htmx:wsClose", () => updateConnStatusText("Disconnected."));
    document.body.addEventListener("htmx:wsError", () => updateConnStatusText("Error."));
    document.body.addEventListener("htmx:wsBeforeMessage", async (e) => {
        try {
            const json = JSON.parse(e.detail.message);
            switch (json.eventType) {
                case toggleEvt:
                    toggleVideo(json.content);
                    break;
                case "playthrough_event":
                    window.triggeredByEvt = true;
                    hoso.currentTime = parseFloat(json.content);
                    console.log(parseFloat(json.content));
                    break;
                default:
                    console.log("Not actual event")
            }

        } catch (error) {
            console.log("Not a json event");
        }
    });
    document.body.addEventListener("htmx:wsAfterMessage", (e) => {
        if (e.detail.message.startsWith("<div")) {
            const form = document.querySelector("#chatform");
            const chatbox = document.querySelector("#chatbox");
            const lastChild = chatbox?.lastElementChild;
            if (lastChild) {
                lastChild.scrollIntoView({
                        block: "end",
                        inline: "nearest",
                        behaviour: "smooth",
                    });
            }
            form.reset();
        }
    });

    let lastSeeking = false;
    function handlePlaythrough(evt) {
        if (window.triggeredByEvt) {
            window.triggeredByEvt = false;
        } else {
            console.log(evt.type);
            videoPlaythrough.value = hoso.currentTime.toString();
            playthroughBtn.click();
        }
    }

    hoso.addEventListener("seeked", handlePlaythrough);
}

templ Room(roomId, mtype string) {
    @RootLayout("Hososuru! | Room " + roomId, "h-full w-full") {
        <header class="border-b border-white/10 py-6 pl-12">
            <h1>Connection Status: <span id="status">Disconnected</span></h1>
            <h1>Room ID: <span id="status">{ roomId }</span></h1>
        </header>
        <div
            hx-ext="ws"
            ws-connect={"/ws/" + roomId}
        >
            <div
                class="hidden lg:fixed lg:inset-y-0 lg:right-0 lg:z-10 lg:flex lg:w-72 lg:flex-col"
            >
                <div
                    class="flex grow flex-col gap-y-5 overflow-y-auto border-l border-white/10 bg-zinc-900 px-6 pb-4"
                >
                <div id="chatbox" class="space-y-2 h-[calc(100%_-_100px)] overflow-y-auto mt-6"></div>
                    <form id="chatform" ws-send="send:submit" class="mt-auto space-y-2">
                        <div>
                            <label
                                for="chatInput"
                                class="block text-sm font-medium leading-6 text-zinc-400"
                            >
                                Message
                            </label>
                            <span id="chatInputDescription" class="sr-only">
                                Enter a message to send to people in the broadcast.
                            </span>
                            <input
                                id="chatInput"
                                name="content"
                                min="1"
                                class="block w-full rounded-md border-0 bg-zinc-800 px-2.5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 placeholder:text-zinc-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                                aria-describedby="chatInputDescription"
                                required
                            />
                        </div>
                        <input hidden name="eventType" value="chat_event" readonly />
                        <div class="flex items-center justify-end">
                            <button
                                type="submit"
                                class="rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-md hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                            >
                                Send
                            </button>
                        </div>
                    </form>
                </div>
            </div>
            <main class="flex items-center pt-8 px-8 lg:pr-80">
                <div class="space-y-4">
                    <video controls muted id="hoso" class="w-full">
                        <source src={"/api/hoso/" + roomId } type={mtype} />
                    </video>
                    <div>
                        <form ws-send="send:submit">
                            <input hidden name="content" value="play" id="videoStatus" />
                            <input hidden name="eventType" value="toggle_event" readonly />
                            <button
                                type="submit"
                                class="capitalize rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-md hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                                id="playBtn"
                            >
                                play
                            </button>
                        </form>
                        <form ws-send="send:submit">
                            <input hidden name="content" value="" id="videoPlaythrough" required />
                            <input hidden name="eventType" value="playthrough_event" readonly />
                            <button id="playthroughBtn" type="submit" class="sr-only" />
                        </form>
                    </div>
                </div>
            </main>
        </div>
        @handler()
    }
}
